#include <SPI.h>                           //Communication Interface with modem
#include "nRF24L01.h"
#include "RF24.h"                          //library to control radio modem

#define motor 4 // pin 4 for user request state
 
RF24 radio(9,10);                          //Creating an object
boolean userreq = 0;
const byte rxAddr[][6] = {"00001", "00002"};


void setup()
{
  pinMode(motor, OUTPUT);
  while (!Serial);
  Serial.begin(9600);
  
  radio.begin();
  radio.setAutoAck(true);
  radio.enableAckPayload();
  radio.enableDynamicPayloads();
  radio.setPALevel(RF24_PA_MAX);
  radio.openWritingPipe(rxAddr[0]);
  radio.openReadingPipe(0, rxAddr[1]);
  
  
}

void loop()
{
  //delay(1000);
  //digitalRead(motor);
  //Serial.println("Motor status");
  //Serial.println(digitalRead(motor));
  delay(5);
  radio.startListening(); //switch the modem to data Receiving mode.
  //Serial.println(radio.available());
  if (radio.available())
  {
    Serial.println("Data Received");
    float water_level = 0;
    radio.read(&water_level, sizeof(water_level));
    if ( water_level <= 20) {
      digitalWrite(motor, HIGH);
    }
    else if ( water_level >= 20 && water_level <= 80) {
      //water is filling fast and motor is running
    }
    else if ( water_level >= 80){
      digitalWrite(motor, LOW); // Turn off the motor
    }
    
    Serial.println(water_level);
  }
  
  delay(5);
  radio.stopListening(); // making as transmitter mode
  if (Serial.available() >0) {
    char key = Serial.read();
    if (key == 'y') {
      bool tx_sent;
      //while (!radio.available()) {
      tx_sent = radio.write(&key, sizeof(key));
      //}
      Serial.println(tx_sent);
    }
  }
 
}
