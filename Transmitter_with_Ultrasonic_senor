#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include "NewPing.h"
#include <SimpleTimer.h>


// defines pins numbers

#define TRIGGER_PIN  2
#define ECHO_PIN     3
#define MAX_DISTANCE 400


const int pushbutton = 4; // pushbutton to trigger sensor check manually
SimpleTimer timer; // Timer defined as t

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);
float duration, distance;


// defines variables
//long duration;
//int distance;
const int water_tank_length = 100;
int iterations = 5;
const byte rxAddr[][6] = {"00001", "00002"};
boolean userreq = 0;
RF24 radio(9,10);                          //Creating an object

float check_sensor()
{ 
  float water_level;
  duration = sonar.ping_median(iterations);
  distance = (duration/2)*0.0343;
  water_level = water_tank_length - distance;
  return water_level;  
}



void setup()
{
  pinMode(pushbutton, INPUT); //sets the pusbutton as input
  Serial.begin(9600); // Starts the serial communication
  
  radio.begin();
  radio.setRetries(15, 15);
  radio.setAutoAck(true);
  radio.enableAckPayload();
  radio.enableDynamicPayloads();
  radio.setPALevel(RF24_PA_MAX);
  radio.openWritingPipe(rxAddr[1]);
  radio.openReadingPipe(0, rxAddr[0]);
  timer.setInterval(60000,check_sensor_transmit);
}


void loop() {
  timer.run();
  delay(5);
  radio.startListening();
  if (radio.available())
  {
    radio.read(&userreq, sizeof(userreq));
    if (userreq == HIGH) {
    Serial.println("recived inteerupt");
    distance = check_sensor();
    Serial.println(distance);
    radio.stopListening(); 
    bool tx_sent;
    tx_sent = radio.write(&distance, sizeof(distance));
    Serial.print("Data TX status: ");
    Serial.println(tx_sent);
    }
  }
  
 }

void check_sensor_transmit()
 {
  Serial.println("subroutine done");
  radio.stopListening(); //switch the modem to data transmission mode.
  distance = check_sensor();
  radio.write(&distance, sizeof(distance));
  Serial.print("Data TX based on timer: ");
  Serial.println("DONE");
  if (distance <= 20)
  { 
    Serial.println("passed f");
    while ( distance <= 80 )
     { 
       Serial.println("passed while");
       distance = check_sensor();
       delay(10000);
       radio.write(&distance, sizeof(distance));
       Serial.print("Data TX based on While: ");
       Serial.println("DONE"); 
     }
  }
 }

 

